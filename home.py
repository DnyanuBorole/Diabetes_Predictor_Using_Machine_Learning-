# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\QT\DIABETES\home.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from login import *
from registration import *
from diabetes import *
from Graphs import view
import numpy.random as numrandom
from Graphs import view
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import BernoulliNB
from sklearn.svm import SVC
from sklearn import svm
from sklearn.svm import LinearSVC
from sklearn import metrics
import warnings
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt1
import sys
import mysql.connector
import mysql as mdb




class home(object):
    def pred(self):
        self.Dialog = QtWidgets.QDialog()
        self.ui = prediction()
        self.ui.setupUi(self.Dialog)
        self.Dialog.show()
        # app.exec_()

    def classfy(self):
        # Split the data into columns and read
        warnings.warn("Variables are collinear.")
        datainput = pd.read_csv("diabetes.csv")
        # Set the outcome and dedlete it
        y = datainput['Outcome']
        del datainput['Outcome']
        # Split data into Test & Training set where test data is 30% & raining data is 70%
        x_train, x_test, y_train, y_test = train_test_split(datainput, y, test_size=0.3)

        # Next use Bayesian Classifier
        classify3 = BernoulliNB()
        # Train the model
        classify3.fit(x_train, y_train)
        # Use the model on the test data
        predicted3 = classify3.predict(x_test)
        nb = metrics.accuracy_score(y_test, predicted3) * 100
        # print("The accuracy score using the Naive Bayes Classifier is ->")
        # print(metrics.accuracy_score(y_test, predicted3))
        # print('---------------------------------------------- ')

        # Next use FLDA Classifier
        classify4 = LinearDiscriminantAnalysis()
        # Train the model
        classify4.fit(x_train, y_train)
        # Use the model on the test data
        predicted4 = classify4.predict(x_test)
        ld = metrics.accuracy_score(y_test, predicted4) * 100
        # print("The accuracy score using the FLDA is ->")
        # print(metrics.accuracy_score(y_test, predicted4))
        # print('---------------------------------------------- ')
        # Next use SVM
        classify5 = svm.LinearSVC()
        # Train the model
        classify5.fit(x_train, y_train)
        # Use the model on the test data
        predicted5 = classify5.predict(x_test)
        svmdt = metrics.accuracy_score(y_test, predicted5) * 100
        # print("The accuracy score using the svm is ->")
        # print(metrics.accuracy_score(y_test, predicted5))
        # print('---------------------------------------------- ')
        list = []
        list.clear()
        list.append(nb)
        list.append(ld)
        list.append(svmdt)
        view(list)




    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1095, 833)
        Dialog.setStyleSheet("QDialog{background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));}\n"
"\n"
"")
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1091, 80))
        self.frame.setStyleSheet("background-color: qconicalgradient(cx:0, cy:0, angle:135, stop:0 rgba(255, 255, 0, 69), stop:0.375 rgba(255, 255, 0, 69), stop:0.423533 rgba(251, 255, 0, 145), stop:0.45 rgba(247, 255, 0, 208), stop:0.477581 rgba(255, 244, 71, 130), stop:0.518717 rgba(255, 218, 71, 130), stop:0.55 rgba(255, 255, 0, 255), stop:0.57754 rgba(255, 203, 0, 130), stop:0.625 rgba(255, 255, 0, 69), stop:1 rgba(255, 255, 0, 69));")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(340, 10, 441, 51))
        self.label.setStyleSheet("color: rgb(0, 0, 0);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        # self.TextLabe = QtWidgets.QLabel(Dialog)
        # self.TextLabe.setGeometry(QtCore.QRect(0, 100, 81, 31))
        # self.TextLabe.setStyleSheet("background-color: rgb(200, 151, 179);\n"
        #                             "font: 10pt \"Agency FB\";")
        # self.TextLabe.setObjectName("TextLabe")
        # self.user = QtWidgets.QLabel(Dialog)
        # self.user.setGeometry(QtCore.QRect(80, 100, 1011, 31))
        # self.user.setStyleSheet("background-color: rgb(200, 151, 179);\n"
        #                         "font: 9pt \"Algerian\";")
        # self.user.setText("")
        # self.user.setObjectName("user")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(500, 300, 161, 51))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.05 rgba(14, 8, 73, 255), stop:0.36 rgba(28, 17, 145, 255), stop:0.6 rgba(126, 14, 81, 255), stop:0.75 rgba(234, 11, 11, 255), stop:0.79 rgba(244, 70, 5, 255), stop:0.86 rgba(255, 136, 0, 255), stop:0.935 rgba(239, 236, 55, 255));\n"
"color: rgb(240, 240, 240);\n"
"font: 12pt \"Algerian\";")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(500, 400, 161, 51))
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgba(0, 0, 0, 255), stop:0.05 rgba(14, 8, 73, 255), stop:0.36 rgba(28, 17, 145, 255), stop:0.6 rgba(126, 14, 81, 255), stop:0.75 rgba(234, 11, 11, 255), stop:0.79 rgba(244, 70, 5, 255), stop:0.86 rgba(255, 136, 0, 255), stop:0.935 rgba(239, 236, 55, 255));\n"
"color: rgb(240, 240, 240);\n"
"font: 12pt \"Algerian\";")
        self.pushButton_2.setObjectName("pushButton_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.pushButton.clicked.connect(self.pred)
        self.pushButton_2.clicked.connect(self.classfy)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "<html><head/><body><p><span style=\" font-size:22pt; font-weight:600; color:#c82519;\">DIABETES PREDICTOR</span></p></body></html>"))
        self.pushButton.setText(_translate("Dialog", "PREDICTION"))
        self.pushButton_2.setText(_translate("Dialog", "CLASSIFICATION"))
        # self.TextLabe.setText(_translate("Dialog", "Welcome>>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = home()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
